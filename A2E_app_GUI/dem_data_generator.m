clear
close all
c = computer;
if contains(c, 'MAC')
    % read files on mac
    input_data_folder = '/Users/yuntao/Documents/MACandPC/software/modeling_vertical_profiles/code_version_no_rounding4_paper1_20230625_GUI/data4testing/0data';
%     demtiff="/Users/yuntao/Mac2PC/asia_gtopo30/asia_gtopo30.tif";
%     demtiff="/Users/yuntao/Documents/Mac2PC/DEM250m/Asia_AU1000m.tif";
    demtiff="/Users/yuntao/Documents/DEM/World_e-Atlas-UCSD_SRTM30-plus_v8.tif";

else
    input_data_folder = 'D:\Mac2PC\software/modeling_vertical_profiles/code_version_no_rounding4_paper1_20230625_GUI/data4testing/0data';
%     demtiff="D:\Mac2PC\asia_gtopo30\asia_gtopo30.tif";
    demtiff="D:\DEM\World_e-Atlas-UCSD_SRTM30-plus_v8.tif";
%     demtiff="D:\Mac2PC\DEM250m\Asia_AU1000m.tif";
    addpath('D:\Mac2PC\Projects\AsiaThermochron\dem')
end


%% inputs datasets
which_one2process_input = "Fitzgerald1995"; % if input "all" - run all inversion; giving a project name, the code will work on the specific project 

cd (input_data_folder)
files = dir();
dirFlags = [files.isdir];
subFolders = files(dirFlags);
cd ..
%% find which ones to process and build the which_one2process matrix
x_extend = 0.2;
y_extend = 0.2;
n1=3;
n2=length(subFolders(:,1));
which_one2process = table('Size',[n2,5],...
    'VariableNames',{'name','folder_index','long','lat','G_present'}, ...
    'VariableTypes', {'string','double','double','double','double'});
names = extractfield(subFolders,'name')';
for ii=n1:n2  
    which_one2process{ii-2,1} = {subFolders(ii,1).name};
end
if which_one2process_input=="all"
else
    [Lia,Locb] = ismember(which_one2process_input, which_one2process{:,1});
    if sum(Lia) == length(which_one2process_input)
        which_one2process = which_one2process(Locb,:);
    else
        disp ("some of the transects are not in the 'which_one2process' folder generated by the 'master' code" )
    end
end

n_transects2process = size(which_one2process,1);
n_thinning=1;

[A,R] = readgeoraster(demtiff,'OutputType','double');
for ii=1:n_transects2process
    folder_ii=which_one2process.name(ii);   
    disp(strcat("processing ",folder_ii)) % tell which one is working on
    datafile=strcat(input_data_folder,'/',folder_ii,'/','DATA_',folder_ii,'.csv');
    data = readtable(datafile);
    data = data(~isnan(data{:,5}),:);
    longi_range=[min(data.longi)-x_extend max(data.longi)+x_extend]; lati_range=[min(data.lati)-y_extend max(data.lati)+y_extend]; 
    demfilename=strcat(input_data_folder,'/',folder_ii,'/','DEM_',folder_ii,'.csv'); % 
    nxfilename=strcat(input_data_folder,'/',folder_ii,'/','nx',folder_ii,'.csv'); % 
    nyfilename=strcat(input_data_folder,'/',folder_ii,'/','ny',folder_ii,'.csv'); % 
    [Z_trimmed, R_trimmed] = geocrop(A,R,lati_range,longi_range );

    latlim = R_trimmed.LatitudeLimits;
    lonlim = R_trimmed.LongitudeLimits;
    Z_trimmed(Z_trimmed==32767)=0;
    
    %% write trimed dem for glide
    Z_trimmed=Z_trimmed(1:n_thinning:end,1:n_thinning:end);
    nx=length(Z_trimmed(1,:)); % n_longi
    ny=length(Z_trimmed(:,1)); % n_lati
    lati_all=linspace(R_trimmed.LatitudeLimits(1),R_trimmed.LatitudeLimits(2),ny);
    longi_all=linspace(R_trimmed.LongitudeLimits(1),R_trimmed.LongitudeLimits(2),nx);
    xyz=zeros(nx*ny,3);
    for i=1:ny
        xyz((i-1)*nx+1:i*nx,1)=longi_all';
        xyz((i-1)*nx+1:i*nx,2)=repmat(lati_all(ny+1-i),nx,1);
        xyz((i-1)*nx+1:i*nx,3)=Z_trimmed(i,:)';
    end
    writematrix(xyz,demfilename,'Delimiter',' ')
    writematrix(nx,nxfilename,'Delimiter',' ')
    writematrix(ny,nyfilename,'Delimiter',' ')
%% plot the dem for checking
%     figure
%     ax1 = axesm('MapProjection','eqdconic',...
%                     'Frame','off',... 
%                     'Grid','on',...
%                     'GColor','k',...
%                     'MapLatLimit',lati_range,...
%                     'MapLonLimit',longi_range,...
%                     'ParallelLabel','on',...
%                     'MeridianLabel','on',...
%                     'MLabelLocation', 10,...
%                     'PLabelLocation', 10,...
%                     'FontSize',10,...
%                     'PLineLocation',5,...
%                     'MLineLocation',5);
%     set(gca, 'Visible', 'off')
%     % geoshow(Z_trimmed, R_trimmed,'DisplayType','surface')
%     geoshow(Z_trimmed/1000, R_trimmed,'DisplayType','surface'); tightmap;
%     alpha(0.7)
%     caxis([0 6])
%     colormap(ax1, gray)
%     c=colorbar(ax1,'Location','west');
%     c.Label.String = 'Elevation (km)';
%     c.Position(1)=c.Position(1)-0.12;
%     c.Position(2)=.55;
%     c.Position(3)=.020;
%     c.Position(4)=.2;
%     c.Label.FontSize = 10;
%     % Create a second axes
%     hAxesS = axes;
%     % Turn off the decorations, backdrop etc. of the second axes so it doesn't cover the first one
%     axis(hAxesS,'off')
%     % Make sure the second axes is current (gca)
%     axes(hAxesS)
%     ax2 = axesm('MapProjection','eqdconic',...
%                     'Frame','off',... 
%                     'Grid','off',...
%                     'GColor','k',...
%                     'MapLatLimit',lati_range,...
%                     'MapLonLimit',longi_range,...
%                     'ParallelLabel','on',...
%                     'MeridianLabel','on',...
%                     'MLabelLocation', 5,...
%                     'PLabelLocation', 5,...
%                     'FontSize',10);
%     scatterm(data.lati,data.longi,30,data.age, 'o', 'filled','markeredgecolor','k'); tightmap; 

%% plot the dem and data points for checking
close all
figure()
imagesc(longi_range,lati_range, flipud(Z_trimmed))
hold on
scatter(data.longi,data.lati,30,data.age, 'o', 'filled','markeredgecolor','k');
set(gca,'ydir', 'normal')
daspect([1 1 1])
end


